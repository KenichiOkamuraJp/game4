# Vue.js ダンジョンRPG Python版 - 完全デプロイコマンド集

# ========================================
# ステップ 1: 前提ソフトウェアのインストール
# ========================================

# Python 3.11 インストール
winget install Python.Python.3.11

# Node.js インストール  
winget install OpenJS.NodeJS

# AWS CLI インストール
winget install Amazon.AWSCLI

# Git インストール
winget install Git.Git

# PowerShell 実行ポリシー設定
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# インストール確認
python --version
node --version
npm --version
aws --version
git --version

# ========================================
# ステップ 2: AWS 認証設定
# ========================================

# AWS 認証情報設定
aws configure
# 入力項目:
# - AWS Access Key ID: [あなたのアクセスキー]
# - AWS Secret Access Key: [あなたのシークレットキー]
# - Default region name: ap-northeast-1
# - Default output format: json

# 認証確認
aws sts get-caller-identity

# ========================================
# ステップ 3: プロジェクトセットアップ
# ========================================

# プロジェクトディレクトリ作成
mkdir vue-dungeon-rpg-python
cd vue-dungeon-rpg-python

# ディレクトリ構造作成
mkdir lambda\characters
mkdir lambda\saves
mkdir scripts

# ========================================
# ステップ 4: ファイル作成
# ========================================

# この段階で、以下のファイルを作成してください:
# 
# 📁 lambda/characters/
# - requirements.txt
# - create.py
# - list.py
# - update.py
# - delete.py
#
# 📁 lambda/saves/
# - requirements.txt
# - create.py
# - get.py
# - update.py
# - delete.py
#
# 📁 scripts/
# - cloudformation.yaml (Python版)
# - deploy-lambda.ps1 (Python版)
# - install-dependencies.ps1 (Python版)
# - setup.ps1 (既存)
# - cleanup.ps1 (既存)
#
# 📁 ルート/
# - package.json
# - vite.config.js
# - index.html (既存のゲームファイル)
# - README.md (Python版)

# ========================================
# ステップ 5: 依存関係のインストール
# ========================================

# Python/Node.js 依存関係の確認・インストール
.\scripts\install-dependencies.ps1

# フロントエンド依存関係のインストール
npm install

# ========================================
# ステップ 6: AWS インフラのデプロイ
# ========================================

# CloudFormation スタックのデプロイ
.\scripts\setup.ps1 -ProjectName "my-dungeon-rpg" -AdminEmail "your-email@example.com"

# 実行内容:
# - DynamoDB テーブル作成
# - Cognito User Pool/Identity Pool 作成
# - Lambda 関数作成（プレースホルダー）
# - API Gateway 作成
# - IAM ロール作成
# - .env ファイル自動生成

# ========================================
# ステップ 7: Python Lambda 関数のデプロイ
# ========================================

# Lambda 関数に Python コードをデプロイ
.\scripts\deploy-lambda.ps1 -ProjectName "my-dungeon-rpg"

# 実行内容:
# - 各 Lambda 関数への Python コードデプロイ
# - boto3 依存関係のインストール
# - ZIP ファイル作成・アップロード
# - 関数更新の完了待機

# ========================================
# ステップ 8: フロントエンド起動・動作確認
# ========================================

# 開発サーバー起動
npm run dev

# ブラウザで以下にアクセス:
# http://localhost:5173

# 動作確認:
# 1. ユーザー登録/ログイン
# 2. キャラクター作成
# 3. ダンジョン探索
# 4. 戦闘システム
# 5. セーブ/ロード機能

# ========================================
# 開発時のコマンド
# ========================================

# Lambda 関数のみ再デプロイ（Python コード修正後）
.\scripts\deploy-lambda.ps1

# インフラのみ再デプロイ（CloudFormation修正後）
.\scripts\setup.ps1

# フロントエンドビルド
npm run build

# プロダクションプレビュー
npm run preview

# ========================================
# デバッグ・トラブルシューティング
# ========================================

# Lambda 関数一覧確認
aws lambda list-functions --query "Functions[?starts_with(FunctionName, 'my-dungeon-rpg')].{Name:FunctionName,Runtime:Runtime}"

# CloudWatch ログ確認
aws logs describe-log-groups --log-group-name-prefix /aws/lambda/my-dungeon-rpg

# 特定関数のログ出力
aws logs tail /aws/lambda/my-dungeon-rpg-characters-create --follow

# CloudFormation スタック状態確認
aws cloudformation describe-stacks --stack-name my-dungeon-rpg-stack

# DynamoDB テーブル確認
aws dynamodb list-tables --query "TableNames[?starts_with(@, 'my-dungeon-rpg')]"

# ========================================
# クリーンアップ（全リソース削除）
# ========================================

# 全 AWS リソースを削除
.\scripts\cleanup.ps1 -ProjectName "my-dungeon-rpg"

# ⚠️ 警告: 全てのデータが削除されます！

# ========================================
# 本番デプロイ時のコマンド
# ========================================

# 本番用ビルド
npm run build

# 本番用 Lambda デプロイ（最適化）
.\scripts\deploy-lambda.ps1 -ProjectName "prod-dungeon-rpg"

# CloudWatch アラーム設定例
aws cloudwatch put-metric-alarm --alarm-name "Lambda-Error-Rate" --alarm-description "Lambda function error rate" --metric-name Errors --namespace AWS/Lambda --statistic Sum --period 300 --threshold 10 --comparison-operator GreaterThanThreshold

# ========================================
# よく使うコマンド集
# ========================================

# Python 仮想環境作成（オプション）
python -m venv venv
venv\Scripts\activate

# pip 依存関係インストール（ローカルテスト用）
cd lambda\characters
pip install -r requirements.txt

# JSON 整形表示
aws cloudformation describe-stacks --stack-name my-dungeon-rpg-stack --query "Stacks[0].Outputs" | python -m json.tool

# 特定リージョンのリソース確認
aws lambda list-functions --region ap-northeast-1 --query "Functions[?contains(FunctionName, 'dungeon')]"